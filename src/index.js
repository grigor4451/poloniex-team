import TelegramBot from 'node-telegram-bot-api'
import config from 'config'
import { connection } from './db/connection.mjs'
import { Replenishment } from './db/replenishmentModel.mjs'
import canvas from 'canvas'
import { Canvas } from 'canvas-constructor/cairo'
process.env.NTBA_FIX_319 = 1;
process.env.NTBA_FIX_350 = 0;

const bot = new TelegramBot(config.get('TELEGRAM_TOKEN'), { polling: true })

const BASE_URL = config.get('BASE_URL')

connection
  .then(() => {
    console.log('Database connection successful')
  })
  .catch((err) => {
    console.log(`Server not running. Error message: ${err.message}`)
    process.exit(1)
  })

bot.on('new_chat_members', (msg) => {
  const chatId = msg.chat.id;
  const newMembers = msg.new_chat_members;

  newMembers.forEach((member) => {
    bot.sendPhoto(chatId, `${BASE_URL}/invite.png`, {
      caption: `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å @${member.username}! –í —Å–∞–º—É—é –¥—Ä—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–∞–Ω–µ—Ç –¥–ª—è —Ç–µ–±—è –≤—Ç–æ—Ä–æ–π —Å–µ–º—å–µ–π, –∞ —Ç—Å –æ—Ç—Ü–æ–º.
   –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ö–æ—á—É –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å —Ç–µ–±—è –æ —Ç–æ–º —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å:
1. –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç(–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ—Ä–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–º);
2. –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –º–∞–Ω—É–∞–ª–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –∑–∞–∫—Ä–µ–ø–µ;
3. –ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –≤–æ—Ä–∫–µ,–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏—Ö –ø–∏—Å–∞—Ç—å –≤ –æ–±—â—É—é –±–µ—Å–µ–¥—É, –∏–ª–∏ –≤ –ª—Å –∫—É—Ä–∞—Ç–æ—Ä—É (–æ–Ω –∑–Ω–∞–µ—Ç —Ç–æ–ª–∫ –≤ —Å–≤–æ–µ–π —Å—Ñ–µ—Ä–µ –∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∂–¥–æ–º –º–æ–º–µ–Ω—Ç–µ).
   –ñ–µ–ª–∞—é —Ç–µ–±–µ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑–∞–ª–µ—Ç–æ–≤. –í–µ—Ä—é —á—Ç–æ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —Ç—ã –æ–±—Ä–µ—Ç–µ—à—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ —Å—Ñ–µ—Ä–µ —Å–∫–∞–º–∞ –∏ –¥–æ–±—å–µ—à—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∞ —Ç–∞–∫ –∂–µ —Å–º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π  –∫–æ–º–∞–Ω–¥—ãüé©
–ó–∞—Ä—è–¥ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –≤–æ—Ä–∫üéâ`
    });
  });
});

bot.on('message', async (msg) => {
  const { text, from, chat } = msg
  const regexPattern = new RegExp(chat.id + '$', 'i');
  const replenishment = await Replenishment.findOne({ state: { $regex: regexPattern } })
  if (chat.id !== from.id) {

    const userReplenishments = await Replenishment.aggregate([
      {
        $group: {
          _id: '$worker',
          replenishmentsCount: { $sum: 1 },
          summ: { $sum: '$amount' }
        }
      }
    ]).sort({ summ: -1 })

    const totalReplenishmentSum = await Replenishment.aggregate([
      {
        $group: {
          _id: null,
          totalSum: { $sum: '$amount' }
        }
      }
    ]);

    if (text?.startsWith('/top')) {

      const totalReplenishments = await Replenishment.countDocuments();


      return bot.sendMessage(chat.id, `
‚≠êÔ∏è –¢–û–ü –í–û–†–ö–ï–†–û–í –ü–û –°–£–ú–ú–ï –ó–ê–õ–ï–¢–û–í:

üèÜ ${userReplenishments[0]?._id.substring(1)} - | üòé Ô∏ª„Éá‚ïê‰∏Ä üí• ü¶£ |

${userReplenishments.slice(0, 10).map((user, index) => `${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `‚ö°Ô∏è${(index + 1)} `}${user._id.substring(1)} - ${user.summ} RUB - ${user.replenishmentsCount} –ü—Ä–æ—Ñ–∏—Ç–æ–≤`).join('\n')}

üìë –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishments}
üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishmentSum[0].totalSum} RUB`)



    }

    if (text?.startsWith('/month')) {

      const monthAgoDate = new Date();
      monthAgoDate.setDate(monthAgoDate.getDate() - 30);
      const totalReplenishments = await Replenishment.countDocuments({
        createdAt: { $gte: monthAgoDate }  
      });


      const userReplenishmentsMonth = await Replenishment.aggregate([
        {
          $match: {
            createdAt: { $gte: monthAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: '$worker',
            replenishmentsCount: { $sum: 1 },
            summ: { $sum: '$amount' }
          }
        }
      ]).sort({ summ: -1 })

      const totalReplenishmentSumMonth = await Replenishment.aggregate([
        {
          $match: {
            createdAt: { $gte: monthAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: null,
            totalSum: { $sum: '$amount' }
          }
        }
      ]);


      return bot.sendMessage(chat.id, `
üëÅÔ∏è–¢–û–ü –í–û–†–ö–ï–†–û–í –ü–û –°–£–ú–ú–ï –ó–ê–õ–ï–¢–û–í –ó–ê –ú–ï–°–Ø–¶:

üèÜ ${userReplenishmentsMonth[0]?._id.substring(1)} - | üòé Ô∏ª„Éá‚ïê‰∏Ä üí• ü¶£ |

${userReplenishmentsMonth.slice(0, 10).map((user, index) => `${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `‚ö°Ô∏è${(index + 1)} `}${user._id.substring(1)} - ${user.summ} RUB - ${user.replenishmentsCount} –ü—Ä–æ—Ñ–∏—Ç–æ–≤`).join('\n')}

üìë –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishments}
üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishmentSumMonth[0].totalSum} RUB`)



    }
    if (text?.startsWith('/day')) {

      const dayAgoDate = new Date();
      dayAgoDate.setDate(dayAgoDate.getDate() - 1);
      const totalReplenishments = await Replenishment.countDocuments({
        createdAt: { $gte: dayAgoDate }
      });


      const userReplenishmentsDay = await Replenishment.aggregate([
        {
          $match: {
            createdAt: { $gte: dayAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: '$worker',
            replenishmentsCount: { $sum: 1 },
            summ: { $sum: '$amount' }
          }
        }
      ]).sort({ summ: -1 })

      const totalReplenishmentSumDay = await Replenishment.aggregate([
        {
          $match: {
            createdAt: { $gte: dayAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: null,
            totalSum: { $sum: '$amount' }
          }
        }
      ]);

      if (userReplenishmentsDay.length === 0) {
        return bot.sendMessage(chat.id, `–ù–µ—Ç –∑–∞–ª–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å`)
      }

      return bot.sendMessage(chat.id, `
üëÅÔ∏è–¢–û–ü –í–û–†–ö–ï–†–û–í –ü–û –°–£–ú–ú–ï –ó–ê–õ–ï–¢–û–í –ó–ê –°–£–¢–ö–ò:

üèÜ ${userReplenishmentsDay[0]?._id.substring(1)} - | üòé Ô∏ª„Éá‚ïê‰∏Ä üí• ü¶£ |

${userReplenishmentsDay.slice(0, 10).map((user, index) => `${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `‚ö°Ô∏è${(index + 1)} `}${user._id.substring(1)} - ${user.summ} RUB - ${user.replenishmentsCount} –ü—Ä–æ—Ñ–∏—Ç–æ–≤`).join('\n')}

üìë –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishments}
üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishmentSumDay[0].totalSum} RUB`)



    }

    if (text?.startsWith('/freemoney')) {

      const startDate = new Date('2024-09-10'); // Start from 10st sep 2024
      const endDate = new Date('2024-10-10');
      const totalReplenishments = await Replenishment.countDocuments({
        createdAt: {
          $gte: startDate,  // Greater than or equal to 1st August 2024
          $lt: endDate      // Less than 1st September 2024
        }
      });


      const userReplenishmentsDay = await Replenishment.aggregate([
        {
          $match: {
            createdAt: {
              $gte: startDate,  // Greater than or equal to 1st August 2024
              $lt: endDate      // Less than 1st September 2024
            }
          }
        },
        {
          $group: {
            _id: '$worker',
            replenishmentsCount: { $sum: 1 },
            summ: { $sum: '$amount' }
          }
        }
      ]).sort({ summ: -1 })

      const totalReplenishmentSumDay = await Replenishment.aggregate([
        {
          $match: {
            createdAt: {
              $gte: startDate,  // Greater than or equal to 1st August 2024
              $lt: endDate      // Less than 1st September 2024
            }
          }
        },
        {
          $group: {
            _id: null,
            totalSum: { $sum: '$amount' }
          }
        }
      ]);

      if (userReplenishmentsDay.length === 0) {
        return bot.sendMessage(chat.id, `–ù–µ—Ç –∑–∞–ª–µ—Ç–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞`)
      }

      return bot.sendMessage(chat.id, `
‚≠êÔ∏è –¢–û–ü –í–û–†–ö–ï–†–û–í –ü–û –°–£–ú–ú–ï –ó–ê–õ–ï–¢–û–í –í –ö–û–ù–ö–£–†–°–ï:

üèÜ ${userReplenishmentsDay[0]?._id.substring(1)} - | üòé Ô∏ª„Éá‚ïê‰∏Ä üí• ü¶£ |

${userReplenishmentsDay.map((user, index) => `${index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `‚ö°Ô∏è${(index + 1)} `}${user._id.substring(1)} - ${user.summ} RUB - ${user.replenishmentsCount} –ü—Ä–æ—Ñ–∏—Ç–æ–≤`).join('\n')}

üìë –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishments}
üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤: ${totalReplenishmentSumDay[0].totalSum} RUB`)



    }

    if (text?.startsWith('/mytop')) {
      const loader = await bot.sendMessage(chat.id, "‚è≥");

      const monthAgoDate = new Date();
      monthAgoDate.setDate(monthAgoDate.getDate() - 30);

      const userMonthReplenishmentSum = await Replenishment.aggregate([
        {
          $match: {
            worker: `@${from.username}`,  // Match the user by username
            createdAt: { $gte: monthAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: null,
            totalAmount: { $sum: '$amount' } // Sum up the amount field
          }
        }
      ]);

      const weekAgoDate = new Date();
      weekAgoDate.setDate(weekAgoDate.getDate() - 7);

      const userWeekReplenishmentSum = await Replenishment.aggregate([
        {
          $match: {
            worker: `@${from.username}`,  // Match the user by username
            createdAt: { $gte: weekAgoDate }  // Match documents where createdAt is greater than or equal to 30 days ago
          }
        },
        {
          $group: {
            _id: null,
            totalAmount: { $sum: '$amount' } // Sum up the amount field
          }
        }
      ]);

      const userReplenishmentSum = await Replenishment.aggregate([
        {
          $match: { worker: `@${from.username}` }
        },
        {
          $group: {
            _id: null,
            replenishmentsCount: { $sum: 1 },
            totalAmount: { $sum: '$amount' }
          }
        }
      ]);


//       return bot.sendMessage(chat.id, `
// ‚≠êÔ∏è –¢–æ–ø –≤–æ—Ä–∫–µ—Ä–∞ ${from.first_name}:
// üèÜ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ ${(userReplenishments?.findIndex(user => user._id === `@${from.username}`) + 1) || '–Ω–µ—Ç'}
// üí∏ –°—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${userReplenishmentSum[0]?.totalAmount || 0}‚ÇΩ

// üíµ –°—É–º–º–∞ –∑–∞–ª–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–∏–π –º–µ—Å—è—Ü: ${userMonthReplenishmentSum[0]?.totalAmount || 0}‚ÇΩ
// üíµ –°—É–º–º–∞ –∑–∞–ª–µ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: ${userWeekReplenishmentSum[0]?.totalAmount || 0}‚ÇΩ

      // üìà –í–∫–ª–∞–¥ –≤ –∫–∞—Å—Å—É: ${userReplenishmentSum[0] ? ((+userReplenishmentSum[0]?.totalAmount / +totalReplenishmentSum[0]?.totalSum) * 100).toFixed(3) : 0}%`)

      setTimeout(async () => {
        try {
          // 3. Generate the image in an async manner
          const image = await generateImageWithCanva(`${userReplenishmentSum[0]?.replenishmentsCount || 0}`, `${userReplenishmentSum[0]?.totalAmount || 0} RUB`, `${userMonthReplenishmentSum[0]?.totalAmount || 0} RUB`, `${userWeekReplenishmentSum[0]?.totalAmount || 0} RUB`, `${(userReplenishments?.findIndex(user => user._id === `@${from.username}`) + 1) || 'not in the top'}`, `@${from.username}`);

          bot.deleteMessage(chat.id, loader.message_id)

          return await bot.sendPhoto(chat.id, image, {
            caption: `
    üìà –í–∫–ª–∞–¥ –≤ –∫–∞—Å—Å—É: ${userReplenishmentSum[0] ? ((+userReplenishmentSum[0]?.totalAmount / +totalReplenishmentSum[0]?.totalSum) * 100).toFixed(3) : 0}%`
});
        
        } catch (error) {
          console.error("Error while generating or sending image:", error);
          bot.sendMessage(chat.id, "Sorry, something went wrong while generating your image.");
        }
      }, 3000); // Delay to simulate async background process (can adjust as needed)

    }


    return
  }


  if (replenishment) {
    if (replenishment.state.startsWith('deposit')) {
      const info = text.split('\n')
      const percent = +replenishment.percent
      const amount = +info[0]?.trim()
      const service = info[1]?.trim()
      const worker = info[2]?.trim()
      const income = amount * percent / 100

      if (!amount || !service || !worker) {
        return bot.sendMessage(chat.id, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥',
                  callback_data: `cancel`,
                },
              ],
            ],
          }
        })
      } else if (!worker.startsWith('@')) {
        return bot.sendMessage(chat.id, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∏–º—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥',
                  callback_data: `cancel`,
                },
              ],
            ],
          }
        })
      } else {
        replenishment.amount = amount
        replenishment.service = service
        replenishment.worker = worker
        replenishment.income = income
        replenishment.state = ''

        await replenishment.save()

        const message = `
  üéØ–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µüéØ

  üí∏–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ‚ÇΩ ${income}(-${100 - percent}%)
  üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${amount}‚ÇΩ
  üíª–°–µ—Ä–≤–∏—Å: ${service}
  ü•∑–í–æ—Ä–∫–µ—Ä: ${worker}
          `
        return bot.sendMessage(chat.id, `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n${message}`, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                  callback_data: `accept-${replenishment?._id}`,
                },
                {
                  text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                  callback_data: `delete-${replenishment?._id}`,
                },
              ],
            ],
          }
        })
      }
    }
  }

  if (text.startsWith('/start')) {
    return bot.sendMessage(chat.id, `üëã –ü—Ä–∏–≤–µ—Ç, ${from.first_name}! –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞`)
  }

  if (text === '/addzalet') {
    return replenishmentMenu(chat.id)
  }

  return bot.sendMessage(chat.id, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É`)
})

bot.on('callback_query', async (query) => {
  const { data, message } = query
  const { chat } = message
  const regexPattern = new RegExp(chat.id + '$', 'i');
  const replenishment = await Replenishment.findOne({ state: { $regex: regexPattern } })


  if (data === 'cancel') {
    bot.deleteMessage(chat.id, query.message.message_id)

    await replenishment?.deleteOne()
    return replenishmentMenu(chat.id)
  }

  if (replenishment) return

  if (data.startsWith('accept')) {
    bot.deleteMessage(chat.id, query.message.message_id)

    const id = data.split('-')[1]
    const zalet = await Replenishment.findOne({ _id: id })
    const message = `
üéØ–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µüéØ

üí∏–î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: ‚ÇΩ ${zalet.income}(-${100 - zalet.percent}%)
üíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${zalet.amount}‚ÇΩ
üíª–°–µ—Ä–≤–∏—Å: ${zalet.service}
ü•∑–í–æ—Ä–∫–µ—Ä: ${zalet.worker}
        `

    bot.sendMessage('-1002037682102', message)
    bot.sendMessage('-1002144952177', message)
    return replenishmentMenu(chat.id)

  }

  if (data.startsWith('delete')) {
    bot.deleteMessage(chat.id, query.message.message_id)

    const id = data.split('-')[1]
    const zalet = await Replenishment.findOne({ _id: id })
    await zalet?.deleteOne()
    return replenishmentMenu(chat.id)
  }


  if (data.startsWith('deposit')) {
    if (query && query.message) {
      bot.deleteMessage(chat.id, query.message.message_id)
    }

    const percent = data.split('-')[1]
    const zalet = await Replenishment.create({
      percent,
      amount: 0,
      worker: '@gohaPidor',
      service: 'Tradeüìä',
    })
    await zalet.save()

    await Replenishment.findOneAndUpdate({ _id: zalet._id }, { state: `deposit-${chat.id}` })

    return bot.sendMessage(chat.id, `
üî¥ –ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

1Ô∏è‚É£ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
2Ô∏è‚É£ –°–µ—Ä–≤–∏—Å
3Ô∏è‚É£ –í–æ—Ä–∫–µ—Ä

üëáüèª –ü—Ä–∏–º–µ—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

\`10000\`
\`Tradeüìä\`
\`@gohaPidor\``, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: `cancel`,
            },
          ],
        ],
      }
    })
  }
})




function replenishmentMenu(chatId) {

  const buttons = [
    [
      {
        text: 'üí≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 80 %',
        callback_data: `deposit-80`,
      },
      {
        text: 'üí≤ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥: 75 %',
        callback_data: `deposit-75`,
      },
    ],
    [
      {
        text: 'üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü: 70 %',
        callback_data: `deposit-70`,
      },
      {
        text: 'üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö2/3/4: 70 %',
        callback_data: `deposit-70`,
      },
    ],
    [
      {
        text: 'üí≤ –î–æ–±–∏–≤ —á–µ—Ä–µ–∑ –¢–ü —Ö4/5: 70 %',
        callback_data: `deposit-70`,
      }
    ],
  ]

  return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∑–∞–ª–µ—Ç–∞`,
    {
      reply_markup: {
        inline_keyboard: buttons
      },
    },
  )
}

async function generateImageWithCanva(count, tatal, totalMonth, totalWeek, place, username) {
  const img = await canvas.loadImage(`${BASE_URL}/mytop.png`)
  canvas.registerFont("./Winter Holiday.otf", {
    family: "Winter-Holiday"
  })

  let image = new Canvas(960, 540)
    .printImage(img, 0, 0, 960, 540)
    .setTextFont('35pt Winter-Holiday')
    .setColor('#08390b')
    .printText(count, 290, 100)
    .printText(tatal, 50, 200)
    .printText(totalMonth, 50, 300)
    .printText(totalWeek, 50, 395)
    .printText(place, 50, 100)
    .setTextFont('35pt Winter-Holiday')
    .setColor('#fff')
    .printText(username, 140, 480)
    .toBuffer();
  
  
  return image
}